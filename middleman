#!/usr/bin/python
#+
# This script acts as a relay between two TCP endpoints, logging
# everything that goes over the connection. Invoke it as follows:
#
#     middleman --relay=localport:remoteaddr:remoteport
#
# Start of development 2009 January 7 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# First successful connections 2009 January 7.
#-

import sys
import select
import socket
import getopt
import random

#+
# Connection management
#-

relay = {} # indexed by local port, values are dictionaries
  # keys in each value dictionary:
  #     listen -- socket to listen on for local connection attempts
  #     remotehost -- remote host name/address to connect to (informational)
  #     remoteport -- remote port to connect to (informational)
  #     addrinfo -- expanded list of alternative remote protocol addresses to connect to
  #     inet6 -- True if connections use IPv6, False for IPv4
  #     connected -- list of opened connections to this host/port
  #
  # Each entry in relay[port]["connected"] is a dictionary with keys as follows:
  #     local -- context for local connection
  #     remote -- context for remote connection
  # Each context object is a dictionary with keys as follows:
  #     socket -- connection socket
  #     buf -- data awaiting writing to socket
  #     eof -- whether EOF has been received
  #     writeend -- whether EOF has been sent (not needed?)

maxbuf = 4096 # how much data to buffer at a time

#+
# Mainline
#-


(opts, args) = getopt.getopt \
  (
	sys.argv[1:],
	"",
	["relay="]
  )
if len(args) != 0 :
	raise getopt.GetoptError("no arguments expected")
#end if
for keyword, value in opts :
	if keyword == "--relay" :
		items = value.split(":")
		if len(items) != 3 :
			raise getopt.GetoptError("usage: --relay=localport:remoteaddr:remoteport")
		#end if
		localport = int(items[0])
		remoteport = int(items[2])
		if relay.has_key(localport) :
			raise getopt.GetoptError("duplicate entry for local port %d" % localport)
		#end if
		relay[localport] = \
			{
				"remotehost" : items[1],
				"remoteport" : remoteport,
				"addrinfo" :
					[
						i[4] for i in socket.getaddrinfo(items[1], remoteport)
							if i[1] == socket.SOCK_STREAM
					],
				"listen" : None,
				"connected" : [],
			}
		relay[localport]["inet6"] = relay[localport]["addrinfo"][0][0] == socket.AF_INET6
		  # assuming I won't get a mixture of v4 and v6!
	#end if
#end for
if len(relay) == 0 :
	raise getopt.GetoptError("no --relay items specified")
#end if

for localport, item in relay.items() :
	# open listeners on all local sockets
	item["listen"] = socket.socket \
	  (
		(socket.AF_INET, socket.AF_INET6)[item["inet6"]],
		socket.SOCK_STREAM
	  )
	item["listen"].bind((("0.0.0.0", "::")[item["inet6"]], localport))
	item["listen"].listen(socket.SOMAXCONN)
#end for
try :
	while True :
		# run listeners and data transfers
		readable = []
		writable = []
		trouble = []
		for item in relay.values() :
			readable.append(item["listen"])
			trouble.append(item["listen"])
			for connection in item["connected"] :
				if not connection["local"]["eof"] and len(connection["remote"]["buf"]) < maxbuf :
					readable.append(connection["local"]["socket"])
				#end if
				if not connection["remote"]["eof"] and len(connection["local"]["buf"]) < maxbuf :
					readable.append(connection["remote"]["socket"])
				#end if
				if len(connection["local"]["buf"]) != 0 :
					writable.append(connection["local"]["socket"])
				#end if
				if len(connection["remote"]["buf"]) != 0 :
					writable.append(connection["remote"]["socket"])
				#end if
				trouble.append(connection["local"]["socket"])
				trouble.append(connection["remote"]["socket"])
			#end for
		#end for
		(readable, writable, trouble) = select.select(readable, writable, trouble)
		readable = set(readable)
		writable = set(writable)
		trouble = set(trouble)
		# NYI check for trouble
		for localport, item in relay.items() :
		  # give highest priority to writes
			new_connected = []
			for connection in item["connected"] :
				connection_ok = True # initial assumption
				if connection["local"]["socket"] in writable :
					try :
						nrbytes = connection["local"]["socket"].send(connection["local"]["buf"])
					except socket.error, (ErrNo, Msg) :
						sys.stderr.write \
						  (
							"%05d!error %d -- %s writing to local\n" % (localport, ErrNo, Msg)
						  )
						nrbytes = None
					#end try
					if nrbytes != None :
						connection["local"]["buf"] = connection["local"]["buf"][nrbytes:]
						if len(connection["local"]["buf"]) == 0 and connection["remote"]["eof"] :
							connection["local"]["socket"].shutdown(socket.SHUT_WR) # send EOF to local end
							connection["local"]["writeend"] = True
						#end if
					else :
						connection_ok = False
					#end if
				#end if
				if connection["remote"]["socket"] in writable :
					try :
						nrbytes = connection["remote"]["socket"].send(connection["remote"]["buf"])
					except socket.error, (ErrNo, Msg) :
						sys.stderr.write \
						  (
							"%05d!error %d -- %s writing to remote\n" % (localport, ErrNo, Msg)
						  )
						nrbytes = None
					#end try
					if nrbytes != None :
						connection["remote"]["buf"] = connection["remote"]["buf"][nrbytes:]
						if len(connection["remote"]["buf"]) == 0 and connection["local"]["eof"] :
							connection["remote"]["socket"].shutdown(socket.SHUT_WR) # send EOF to remote end
							connection["remote"]["writeend"] = True
						#end if
					else :
						connection_ok = False
					#end if
				#end if
				if connection_ok :
					new_connected.append(connection)
				else :
					connection["local"]["socket"].close()
					connection["remote"]["socket"].close()
				#end if
			#end for
			item["connected"] = new_connected
		#end for
		for localport, item in relay.items() :
		  # give next priority to reads
			new_connected = []
			for connection in item["connected"] :
				connection_ok = True # initial assumption
				if connection["local"]["socket"] in readable :
					try :
						data = connection["local"]["socket"].recv(maxbuf - len(connection["remote"]["buf"]))
					except socket.error, (ErrNo, Msg) :
						sys.stderr.write \
						  (
							"%05d!error %d -- %s reading from local\n" % (localport, ErrNo, Msg)
						  )
						data = None
					#end try
					if data != None :
						if len(data) != 0 :
							continued = \
								(
									len(connection["remote"]["buf"]) != 0
								and
									connection["remote"]["buf"][-1] != "\n"
								)
							connection["remote"]["buf"] += data
							while True :
								pos = data.find("\n")
								if pos < 0 :
									pos = len(data) # all remaining data
								else :
									pos += 1 # include newline
								#end if
								line = data[:pos]
								data = data[pos:]
								if not continued :
									sys.stdout.write("%05d>" % localport)
								#end if
								sys.stdout.write(line)
								continued = False
								if len(data) == 0 :
									break
							#end while
						else :
							if continued :
								sys.stdout.write("\n")
							#end if
							sys.stdout.write("%05d:local EOF\n" % localport)
							if len(connection["remote"]["buf"]) == 0 :
								connection["remote"]["socket"].shutdown(socket.SHUT_WR) # send EOF to remote end
								connection["remote"]["writeend"] = True
							#end if
							connection["local"]["eof"] = True
						#end if
					else :
						connection_ok = False
					#end if
				#end if
				if connection["remote"]["socket"] in readable :
					try :
						data = connection["remote"]["socket"].recv(maxbuf - len(connection["local"]["buf"]))
					except socket.error, (ErrNo, Msg) :
						sys.stderr.write \
						  (
							"%05d!error %d -- %s reading from remote\n" % (localport, ErrNo, Msg)
						  )
						data = None
					#end try
					if data != None :
						if len(data) != 0 :
							continued = len(connection["local"]["buf"]) != 0 and connection["local"]["buf"][-1] != "\n"
							connection["local"]["buf"] += data
							while True :
								pos = data.find("\n")
								if pos < 0 :
									pos = len(data) # all remaining data
								else :
									pos += 1 # include newline
								#end if
								line = data[:pos]
								data = data[pos:]
								if not continued :
									sys.stdout.write("%05d<" % localport)
								#end if
								sys.stdout.write(line)
								continued = False
								if len(data) == 0 :
									break
							#end while
						else :
							if continued :
								sys.stdout.write("\n")
							#end if
							sys.stdout.write("%05d:remote EOF\n" % localport)
							if len(connection["local"]["buf"]) == 0 :
								connection["local"]["socket"].shutdown(socket.SHUT_WR) # send EOF to local end
								connection["local"]["writeend"] = True
							#end if
							connection["remote"]["eof"] = True
						#end if
					else :
						connection_ok = False
					#end if
				#end if
				if (
						connection_ok
					and
						not
							(
								connection["local"]["eof"]
							and
								connection["remote"]["eof"]
							and
								len(connection["local"]["buf"]) == 0
							and
								len(connection["remote"]["buf"]) == 0
							)
				) :
					new_connected.append(connection)
				else :
					connection["local"]["socket"].close()
					connection["remote"]["socket"].close()
				#end if
			#end for
			item["connected"] = new_connected
		#end for
		for localport, item in relay.items() :
		  # give lowest priority to accepting new connections
			if item["listen"] in readable :
				(local, addr) = item["listen"].accept()
				sys.stderr.write \
				  (
					"%05d:connect from %s\n" % (localport, addr)
				  )
				remote = socket.socket \
				  (
					(socket.AF_INET, socket.AF_INET6)[item["inet6"]],
					socket.SOCK_STREAM
				  )
				connection = \
					{
						"local" :
							{
								"socket" : local,
								"buf" : "",
								"eof" : False,
								"writeend" : False,
							},
						"remote" :
							{
								"socket" : remote,
								"buf" : "",
								"eof" : False,
								"writeend" : False,
							},
					}
				addrinfo_totry = list(item["addrinfo"])
				random.shuffle(addrinfo_totry)
				addrinfo_totry = iter(addrinfo_totry)
				while True :
					try :
						addrinfo = addrinfo_totry.next()
					except StopIteration :
						raise RuntimeError \
						  (
							"can't open %s:%d" % (item["remotehost"], item["remoteport"])
						  )
					#end try
					try :
						remote.connect(addrinfo)
						break
					except socket.error, (ErrNo, Msg) :
						sys.stderr.write \
						  (
							"%05d!error %d -- %s connecting to %s\n" % (localport, ErrNo, Msg, repr(addrinfo))
						  )
					#end try
				#end while
				item["connected"].append(connection)
			#end if
		#end for
	#end while
except KeyboardInterrupt :
	pass
#end try
for item in relay.values() :
	# shut everything down
	for connection in item["connected"] :
		connection["local"]["socket"].close()
		connection["remote"]["socket"].close()
	#end for
	if item["listen"] !=  None :
		item["listen"].close()
	#end if
#end for
